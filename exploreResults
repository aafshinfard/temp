### Compare incosistency of two algorithms and check their diff with a ground truth
toCheck=n70.t85
ref=n70.st2

awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_${toCheck} molCount_${ref} > molCount_${ref}_filt${toCheck} 
awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_${ref} molCount_${toCheck} > molCount_${toCheck}_filt${ref}
./compare.sh ${ref}_filt${toCheck} GT_m8d100k
./compare.sh ${toCheck}_filt${ref} GT_m8d100k

diff -y molCount_${toCheck}_filt${ref}  molCount_${ref}_filt${toCheck}   | grep "\-.*\-" > diff_f1_${toCheck}_${ref}
diff -y molCount_${ref}_filt${toCheck}  molCount_${toCheck}_filt${ref}   | grep "\-.*\-" > diff_f1_${ref}_${toCheck}

# grep "|" diff_f1_${toCheck}_${ref} | awk {'print "\t"$1" "$2'} > molCount_${toCheck}_incons_${ref}
grep "|" diff_f1_${toCheck}_${ref} | awk -F\| '$1 { print substr($1,1,26)}' > molCount_${toCheck}_incons_${ref}
# grep "|" diff_f1_${ref}_${toCheck} | awk {'print "\t"$1" "$2'} > molCount_${ref}_incons_${toCheck}
grep "|" diff_f1_${ref}_${toCheck} | awk -F\| '$1 { print substr($1,1,26)}' > molCount_${ref}_incons_${toCheck}

rm diff_f1_${toCheck}_${ref}
rm diff_f1_${ref}_${toCheck}

./compare.sh ${toCheck}_incons_${ref} ${ref}_incons_${toCheck} skip2+
./compare.sh ${toCheck}_incons_${ref} GT_m8d100k
./compare.sh ${ref}_incons_${toCheck} GT_m8d100k

rm molCount_${toCheck}_filt${ref}
rm molCount_${ref}_filt${toCheck} 

grep "|" diff_f1_n70.t85_incons_n70.st2_GT_m8d100k | awk {'print $2'} > weFailTheyMightDo.n70
grep "|" diff_f1_n70.st2_incons_n70.t85_GT_m8d100k | awk {'print $2'} > theyFailWeMightDo.n70

grep -v "|" diff_f1_n70.t85_incons_n70.st2_GT_m8d100k > temp1
awk 'NR==FNR{seen[$2]; next} $1 in seen' temp1 theyFailWeMightDo.n70 > theyFailWeDo.n70
rm temp1


grep -v "|" diff_f1_n70.st2_incons_n70.t85_GT_m8d100k > temp1
awk 'NR==FNR{seen[$2]; next} $1 in seen' temp1 weFailTheyMightDo.n70 > weFailTheyDo.n70
rm temp1

cd ..
cp f1.n100-2000.physlr.overlap.n70.tsv f1.weFailTheyDo.overlap.n70.tsv
make v=$(paste -sd, <compare/weFailTheyDo.n70) d=1 f1.weFailTheyDo.overlap.n70.subgraph.tsv
rm f1.weFailTheyDo.overlap.n70.tsv

cp f1.n100-2000.physlr.overlap.n70.tsv f1.theyFailWeDo.overlap.n70.tsv
make v=$(paste -sd, <compare/theyFailWeDo.n70) d=1 f1.theyFailWeDo.overlap.n70.subgraph.tsv
rm f1.theyFailWeDo.overlap.n70.tsv

#### extracting subgraphs from a mixed file from physlr:
## from n70 file
barcode="AAACACCAGTCACGCC"
grep $barcode f1.n100-2000.physlr.overlap.n70.subgraph.tsv | tail -n+2 | awk {'print $1 "\n" $2'} | sort | uniq > subgraphs/physlr/$barcode.n70.neigh
awk 'NR==FNR{seen[$1]; next} $1 in seen' subgraphs/physlr/$barcode.n70.neigh f1.n100-2000.physlr.overlap.n70.subgraph.tsv > subgraphs/physlr/$barcode.n70.neigh.f1
awk 'NR==FNR{seen[$1]; next} $2 in seen' subgraphs/physlr/$barcode.n70.neigh subgraphs/physlr/$barcode.n70.neigh.f1 > subgraphs/physlr/$barcode.n70.neigh.f1.f2
grep -v $barcode subgraphs/physlr/$barcode.n70.neigh.f1.f2 > subgraphs/physlr/$barcode.n70.neigh.subgraph

barcode="AAACACCCAACACCTA"
grep $barcode f1.n100-2000.physlr.overlap.n70.subgraph.tsv | tail -n+2 | awk {'print $1 "\n" $2'} | sort | uniq > subgraphs/physlr/$barcode.n70.neigh
awk 'NR==FNR{seen[$1]; next} $1 in seen' subgraphs/physlr/$barcode.n70.neigh f1.n100-2000.physlr.overlap.n70.subgraph.tsv > subgraphs/physlr/$barcode.n70.neigh.f1
awk 'NR==FNR{seen[$1]; next} $2 in seen' subgraphs/physlr/$barcode.n70.neigh subgraphs/physlr/$barcode.n70.neigh.f1 > subgraphs/physlr/$barcode.n70.neigh.f1.f2
grep -v $barcode subgraphs/physlr/$barcode.n70.neigh.f1.f2 > subgraphs/physlr/$barcode.n70.neigh.subgraph

barcode="AAACACCCAATCCTTT"
grep $barcode f1.n100-2000.physlr.overlap.n70.subgraph.tsv | tail -n+2 | awk {'print $1 "\n" $2'} | sort | uniq > subgraphs/physlr/$barcode.n70.neigh
awk 'NR==FNR{seen[$1]; next} $1 in seen' subgraphs/physlr/$barcode.n70.neigh f1.n100-2000.physlr.overlap.n70.subgraph.tsv > subgraphs/physlr/$barcode.n70.neigh.f1
awk 'NR==FNR{seen[$1]; next} $2 in seen' subgraphs/physlr/$barcode.n70.neigh subgraphs/physlr/$barcode.n70.neigh.f1 > subgraphs/physlr/$barcode.n70.neigh.f1.f2
grep -v $barcode subgraphs/physlr/$barcode.n70.neigh.f1.f2 > subgraphs/physlr/$barcode.n70.neigh.subgraph
barcode="AAACACCCAATGGTAA"
grep $barcode f1.n100-2000.physlr.overlap.n70.subgraph.tsv | tail -n+2 | awk {'print $1 "\n" $2'} | sort | uniq > subgraphs/physlr/$barcode.n70.neigh
awk 'NR==FNR{seen[$1]; next} $1 in seen' subgraphs/physlr/$barcode.n70.neigh f1.n100-2000.physlr.overlap.n70.subgraph.tsv > subgraphs/physlr/$barcode.n70.neigh.f1
awk 'NR==FNR{seen[$1]; next} $2 in seen' subgraphs/physlr/$barcode.n70.neigh subgraphs/physlr/$barcode.n70.neigh.f1 > subgraphs/physlr/$barcode.n70.neigh.f1.f2
grep -v $barcode subgraphs/physlr/$barcode.n70.neigh.f1.f2 > subgraphs/physlr/$barcode.n70.neigh.subgraph
barcode="AAACACCCACAATGGG"
grep $barcode f1.n100-2000.physlr.overlap.n70.subgraph.tsv | tail -n+2 | awk {'print $1 "\n" $2'} | sort | uniq > subgraphs/physlr/$barcode.n70.neigh
awk 'NR==FNR{seen[$1]; next} $1 in seen' subgraphs/physlr/$barcode.n70.neigh f1.n100-2000.physlr.overlap.n70.subgraph.tsv > subgraphs/physlr/$barcode.n70.neigh.f1
awk 'NR==FNR{seen[$1]; next} $2 in seen' subgraphs/physlr/$barcode.n70.neigh subgraphs/physlr/$barcode.n70.neigh.f1 > subgraphs/physlr/$barcode.n70.neigh.f1.f2
grep -v $barcode subgraphs/physlr/$barcode.n70.neigh.f1.f2 > subgraphs/physlr/$barcode.n70.neigh.subgraph


barcode="AAACACCCACATTCGA"
grep $barcode f1.n100-2000.physlr.overlap.n70.subgraph.tsv | tail -n+2 | awk {'print $1 "\n" $2'} | sort | uniq > subgraphs/physlr/$barcode.n70.neigh
awk 'NR==FNR{seen[$1]; next} $1 in seen' subgraphs/physlr/$barcode.n70.neigh f1.n100-2000.physlr.overlap.n70.subgraph.tsv > subgraphs/physlr/$barcode.n70.neigh.f1
awk 'NR==FNR{seen[$1]; next} $2 in seen' subgraphs/physlr/$barcode.n70.neigh subgraphs/physlr/$barcode.n70.neigh.f1 > subgraphs/physlr/$barcode.n70.neigh.f1.f2
grep -v $barcode subgraphs/physlr/$barcode.n70.neigh.f1.f2 > subgraphs/physlr/$barcode.n70.neigh.subgraph

## from non filtered by n100 file

barcode="AAACACCAGTCACGCC"
grep $barcode f1.n100-2000.physlr.overlap.subgraph.tsv | tail -n+2 | awk {'print $1 "\n" $2'} | sort | uniq > subgraphs/physlr/$barcode.all.neigh
awk 'NR==FNR{seen[$1]; next} $1 in seen' subgraphs/physlr/$barcode.all.neigh f1.n100-2000.physlr.overlap.subgraph.tsv > subgraphs/physlr/$barcode.all.neigh.f1
awk 'NR==FNR{seen[$1]; next} $2 in seen' subgraphs/physlr/$barcode.all.neigh subgraphs/physlr/$barcode.all.neigh.f1 > subgraphs/physlr/$barcode.all.neigh.f1.f2
grep -v $barcode subgraphs/physlr/$barcode.all.neigh.f1.f2 > subgraphs/physlr/$barcode.all.neigh.subgraph

barcode="AAACACCCAACACCTA"
grep $barcode f1.n100-2000.physlr.overlap.subgraph.tsv | tail -n+2 | awk {'print $1 "\n" $2'} | sort | uniq > subgraphs/physlr/$barcode.all.neigh
awk 'NR==FNR{seen[$1]; next} $1 in seen' subgraphs/physlr/$barcode.all.neigh f1.n100-2000.physlr.overlap.subgraph.tsv > subgraphs/physlr/$barcode.all.neigh.f1
awk 'NR==FNR{seen[$1]; next} $2 in seen' subgraphs/physlr/$barcode.all.neigh subgraphs/physlr/$barcode.all.neigh.f1 > subgraphs/physlr/$barcode.all.neigh.f1.f2
grep -v $barcode subgraphs/physlr/$barcode.all.neigh.f1.f2 > subgraphs/physlr/$barcode.all.neigh.subgraph

barcode="AAACACCCAATCCTTT"
grep $barcode f1.n100-2000.physlr.overlap.subgraph.tsv | tail -n+2 | awk {'print $1 "\n" $2'} | sort | uniq > subgraphs/physlr/$barcode.all.neigh
awk 'NR==FNR{seen[$1]; next} $1 in seen' subgraphs/physlr/$barcode.all.neigh f1.n100-2000.physlr.overlap.subgraph.tsv > subgraphs/physlr/$barcode.all.neigh.f1
awk 'NR==FNR{seen[$1]; next} $2 in seen' subgraphs/physlr/$barcode.all.neigh subgraphs/physlr/$barcode.all.neigh.f1 > subgraphs/physlr/$barcode.all.neigh.f1.f2
grep -v $barcode subgraphs/physlr/$barcode.all.neigh.f1.f2 > subgraphs/physlr/$barcode.all.neigh.subgraph
barcode="AAACACCCAATGGTAA"
grep $barcode f1.n100-2000.physlr.overlap.subgraph.tsv | tail -n+2 | awk {'print $1 "\n" $2'} | sort | uniq > subgraphs/physlr/$barcode.all.neigh
awk 'NR==FNR{seen[$1]; next} $1 in seen' subgraphs/physlr/$barcode.all.neigh f1.n100-2000.physlr.overlap.subgraph.tsv > subgraphs/physlr/$barcode.all.neigh.f1
awk 'NR==FNR{seen[$1]; next} $2 in seen' subgraphs/physlr/$barcode.all.neigh subgraphs/physlr/$barcode.all.neigh.f1 > subgraphs/physlr/$barcode.all.neigh.f1.f2
grep -v $barcode subgraphs/physlr/$barcode.all.neigh.f1.f2 > subgraphs/physlr/$barcode.all.neigh.subgraph
barcode="AAACACCCACAATGGG"
grep $barcode f1.n100-2000.physlr.overlap.subgraph.tsv | tail -n+2 | awk {'print $1 "\n" $2'} | sort | uniq > subgraphs/physlr/$barcode.all.neigh
awk 'NR==FNR{seen[$1]; next} $1 in seen' subgraphs/physlr/$barcode.all.neigh f1.n100-2000.physlr.overlap.subgraph.tsv > subgraphs/physlr/$barcode.all.neigh.f1
awk 'NR==FNR{seen[$1]; next} $2 in seen' subgraphs/physlr/$barcode.all.neigh subgraphs/physlr/$barcode.all.neigh.f1 > subgraphs/physlr/$barcode.all.neigh.f1.f2
grep -v $barcode subgraphs/physlr/$barcode.all.neigh.f1.f2 > subgraphs/physlr/$barcode.all.neigh.subgraph


barcode="AAACACCCACATTCGA"
grep $barcode f1.n100-2000.physlr.overlap.subgraph.tsv | tail -n+2 | awk {'print $1 "\n" $2'} | sort | uniq > subgraphs/physlr/$barcode.all.neigh
awk 'NR==FNR{seen[$1]; next} $1 in seen' subgraphs/physlr/$barcode.all.neigh f1.n100-2000.physlr.overlap.subgraph.tsv > subgraphs/physlr/$barcode.all.neigh.f1
awk 'NR==FNR{seen[$1]; next} $2 in seen' subgraphs/physlr/$barcode.all.neigh subgraphs/physlr/$barcode.all.neigh.f1 > subgraphs/physlr/$barcode.all.neigh.f1.f2
grep -v $barcode subgraphs/physlr/$barcode.all.neigh.f1.f2 > subgraphs/physlr/$barcode.all.neigh.subgraph





### Intersection of non-consistent barcodes results:



grep "|" diff_f1_t55_GT_m30d200k  | awk {'if ($4>$1) print $2'} > incons_t55_m30d200k
grep "|" diff_f1_t60_GT_m30d200k  | awk {'if ($4>$1) print $2'} > incons_t60_m30d200k
grep "|" diff_f1_t65_GT_m30d200k  | awk {'if ($4>$1) print $2'} > incons_t65_m30d200k
grep "|" diff_f1_t70_GT_m30d200k  | awk {'if ($4>$1) print $2'} > incons_t70_m30d200k
grep "|" diff_f1_t75_GT_m30d200k  | awk {'if ($4>$1) print $2'} > incons_t75_m30d200k
grep "|" diff_f1_t80_GT_m30d200k  | awk {'if ($4>$1) print $2'} > incons_t80_m30d200k
grep "|" diff_f1_t85_GT_m30d200k  | awk {'if ($4>$1) print $2'} > incons_t85_m30d200k
grep "|" diff_f1_t90_GT_m30d200k  | awk {'if ($4>$1) print $2'} > incons_t90_m30d200k
grep "|" diff_f1_t94_GT_m30d200k  | awk {'if ($4>$1) print $2'} > incons_t94_m30d200k

awk 'NR==FNR{seen[$1]; next} $1 in seen' incons_t60_m30d200k incons_t55_m30d200k > incons_t55_m30d200k_f.60
awk 'NR==FNR{seen[$1]; next} $1 in seen' incons_t65_m30d200k incons_t55_m30d200k_f.60 > incons_t55_m30d200k_f.60.65
awk 'NR==FNR{seen[$1]; next} $1 in seen' incons_t70_m30d200k incons_t55_m30d200k_f.60.65 > incons_t55_m30d200k_f.60.65.70
awk 'NR==FNR{seen[$1]; next} $1 in seen' incons_t75_m30d200k incons_t55_m30d200k_f.60.65.70 > incons_t55_m30d200k_f.60.65.70.75
awk 'NR==FNR{seen[$1]; next} $1 in seen' incons_t80_m30d200k incons_t55_m30d200k_f.60.65.70.75 > incons_t55_m30d200k_f.60.65.70.75.80
awk 'NR==FNR{seen[$1]; next} $1 in seen' incons_t85_m30d200k incons_t55_m30d200k_f.60.65.70.75.80 > incons_t55_m30d200k_f.60.65.70.75.80.85
awk 'NR==FNR{seen[$1]; next} $1 in seen' incons_t90_m30d200k incons_t55_m30d200k_f.60.65.70.75.80.85 > incons_t55_m30d200k_f.60.65.70.75.80.85.90
awk 'NR==FNR{seen[$1]; next} $1 in seen' incons_t94_m30d200k incons_t55_m30d200k_f.60.65.70.75.80.85.90 > incons_t55_m30d200k_f.60.65.70.75.80.85.90.94


################################################################ Shell scripts to do the comparison:
#!/usr/bin/bash

toCheck=gitMaster
#toCheck=GT_m8d200k
ref=GT_m8d50k

######################### [start: These lines are for comparing our results to Tigmints, if you are comparing Tigmint with Tigmint comment these
header=$(cat ../f1_${toCheck}.mol.tsv | awk '{if(gsub(/\t/,"")<2) print gsub(/\t/,"")}' | wc -l )
headerLenght=$(($header-1))
echo "$header"
echo "$headerLenght"
head ../f1_${toCheck}.mol.tsv -n $headerLenght > f1_${toCheck}.header.mol.tsv
awk -F\| '$1 { print substr($1,1,18)}' f1_${toCheck}.header.mol.tsv | uniq -c | sort -k 2 > molCount_${toCheck}
######################### end]

awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_${toCheck} molCount_${ref} > molCount_${ref}_filt${toCheck} 
awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_${ref} molCount_${toCheck} > molCount_${toCheck}_filt${ref}
diff -y molCount_${toCheck}_filt${ref}  molCount_${ref}_filt${toCheck}   | grep "\-.*\-" > diff_f1_${toCheck}_${ref}
rm molCount_${toCheck}_filt${ref}
rm molCount_${ref}_filt${toCheck} 

echo "number of barcodes:"
num_barcodes=$(wc -l diff_f1_${toCheck}_${ref} | awk {'print $1'})
echo "$num_barcodes"
echo "number of inconsistents:"
grep "|" diff_f1_${toCheck}_${ref} |  wc -l
echo "number of consistents:"
num_cons=$(grep -v "|" diff_f1_${toCheck}_${ref} | wc -l)
echo "$num_cons"
#aa=`expr $num_cons + $num_barcodes`
printf %.1f\\n "$((1000 * $num_cons/$num_barcodes))e-1"
#grep "|" diff_f1_${toCheck}_${ref} | awk {'print $1-$4'} | sort -g | uniq -c > spdiff_f1_${toCheck}_${ref}

echo "number of undersplittings:"
num_under=$(grep "|" diff_f1_${toCheck}_${ref} | awk {'print $1-$4'} | sort -g | uniq -c | awk {'if($2<0) print $1'} | awk '{s+=$1} END {print s}')
echo "$num_under"
printf %.1f\\n "$((1000 * $num_under/$num_barcodes))e-1"

echo "number of oversplittings:"
num_over=$(grep "|" diff_f1_${toCheck}_${ref} | awk {'print $1-$4'} | sort -g | uniq -c | awk {'if($2>0) print $1'} | awk '{s+=$1} END {print s}')
echo "$num_over"
printf %.1f\\n "$((1000 * $num_over/$num_barcodes))e-1"


num_m_cons=$(grep -v "|" diff_f1_${toCheck}_${ref} | awk {'if($3>1) print'} | wc -l)
num_m_under=$(grep "|" diff_f1_${toCheck}_${ref} | awk {'if($4>1) print'} | awk {'print $1-$4'} | sort -g | uniq -c | awk {'if($2<0) print $1'} | awk '{s+=$1} END {print s}')
num_m_over=$(grep "|" diff_f1_${toCheck}_${ref} | awk {'if($4>1) print'} | awk {'print $1-$4'} | sort -g | uniq -c | awk {'if($2>0) print $1'} | awk '{s+=$1} END {print s}')
num_m_barcodes=$(($num_m_cons+$num_m_under+$num_m_over))
echo "$num_m_barcodes"
echo "number of consistent (with #mol > 1):"
echo "$num_m_cons"
printf %.1f\\n "$((1000 * $num_m_cons/$num_m_barcodes))e-1"

echo "number of undersplittings (with #mol > 1):"
echo "$num_m_under"
printf %.1f\\n "$((1000 * $num_m_under/$num_m_barcodes))e-1"

echo "number of oversplittings (with #mol > 1):"
echo "$num_m_over"
printf %.1f\\n "$((1000 * $num_m_over/$num_m_barcodes))e-1"


################################################################
################################[ NEW LANE OF TESTS:
################################################################

################################################################
##### Ground truth:
cut -f4 fly/fly.f1.a0.65.d10000.n5.q1.s2000.molecule.bed | uniq -c | sort -k 2  > compare/molCount_GT_m4d10k

cut -f4 fly/fly.f1.a0.65.d100k.m8.n5.q1.s2000.molecule.bed | uniq -c | sort -k 2  > compare/molCount_GT_m8d100k
cut -f4 fly/fly.f1.a0.65.d100k.m30.n5.q1.s2000.molecule.bed | uniq -c | sort -k 2  > compare/molCount_GT_m30d100k
cut -f4 fly/fly.f1.a0.65.d200k.m8.n5.q1.s2000.molecule.bed | uniq -c | sort -k 2  > compare/molCount_GT_m8d200k
cut -f4 fly/fly.f1.a0.65.d200k.m30.n5.q1.s2000.molecule.bed | uniq -c | sort -k 2  > compare/molCount_GT_m30d200k
cut -f4 fly/fly.f1.a0.65.d50k.m8.n5.q1.s2000.molecule.bed | uniq -c | sort -k 2  > compare/molCount_GT_m8d50k

######
## comparing m8d200k with m4d10k:
toCheck=m8d200k
ref=m410k
awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_GT_${toCheck} molCount_GT_${ref} > molCount_GT_${toCheck}_filt${ref}
awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_GT_${ref} molCount_GT_${toCheck} > molCount_GT_${ref}_filt${toCheck} 
diff -y molCount_GT_${toCheck}_filt${ref}  molCount_GT_${ref}_filt${toCheck}   | grep "\-.*\-" > diff_f1_${toCheck}_${ref}
grep "|" diff_f1_${toCheck}_${ref} |  wc -l
wc -l diff_f1_${toCheck}_${ref}
grep -v "|" diff_f1_${toCheck}_${ref} | wc -l
grep "|" diff_f1_${toCheck}_${ref} | awk {'print $1-$4'} | sort -g | uniq -c > spdiff_f1_${toCheck}_${ref}

# number of undersplittings"
grep "|" diff_f1_${toCheck}_${ref} | awk {'print $1-$4'} | sort -g | uniq -c | awk {'if($2<0) print $1'} | awk '{s+=$1} END {print s}'
# number of oversplittings"
grep "|" diff_f1_${toCheck}_${ref} | awk {'print $1-$4'} | sort -g | uniq -c | awk {'if($2>0) print $1'} | awk '{s+=$1} END {print s}'
## Multicomp
grep -v "|" diff_f1_${toCheck}_${ref} | awk {'if($3>1) print'} | wc -l
grep "|" diff_f1_${toCheck}_${ref} | awk {'if($4>1) print'} | awk {'print $1-$4'} | sort -g | uniq -c | awk {'if($2>0) print $1'} | awk '{s+=$1} END {print s}'
grep "|" diff_f1_${toCheck}_${ref} | awk {'if($4>1) print'} | awk {'print $1-$4'} | sort -g | uniq -c | awk {'if($2<0) print $1'} | awk '{s+=$1} END {print s}'


################################################################
################################ NEW LANE OF TESTS ENDS HERE   ]
################################################################

################################################################
################################################################
#################### Fly dataset: f1.* | strategy: sqCos with threshold 90
# run log:
ls 1_f1_sqCos_t90_makeTest.log
# resulting file:
f1_sqCos_t90.n100-2000.n100.mol.tsv
#
cat f1_sqCos_t90.n100-2000.n100.mol.tsv | awk '{if(gsub(/\t/,"")<2) print gsub(/\t/,"")}' | wc -l
head f1_sqCos_t90.n100-2000.n100.mol.tsv -n 454363 > compare/f1_sqCos_t90.header.mol.tsv
cd compare
awk -F\| '$1 { print substr($1,1,18)}' f1_sqCos_t90.header.mol.tsv | uniq -c | sort -k 2 > molCount_f1_sqCos_t90
awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_f1_sqCos_t90 molCount_GT_2 > molCount_GT_2_filt.sqCos_t90 
awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_GT_2_filt.sqCos_t90 molCount_f1_sqCos_t90 > molCount_f1_sqCos_t90_filt.GT_2
diff -y molCount_f1_sqCos_t90_filt.GT_2 molCount_GT_2_filt.sqCos_t90  | grep "\-.*\-" > diff_f1_sqCos_t90_vs_GT_2
grep "|" diff_f1_sqCos_t90_vs_GT_2 |  wc -l
grep -v "|" diff_f1_sqCos_t90_vs_GT_2 | wc -l
wc -l diff_f1_sqCos_t90_vs_GT_2
grep "|" diff_f1_sqCos_t90_vs_GT_2 | awk {'print $1-$4'} | sort -g | uniq -c > spdiff_f1_sqCos_t90_vs_GT_2
grep "|" diff_f1_sqCos_t90_vs_GT_2 | awk {'if($4>1) print'} | awk {'print $1-$4'} | sort -g | uniq -c > spdiff_f1_sqCos_t90_vs_GT_2_multicompsTig
grep -v "|" diff_f1_sqCos_t90_vs_GT_2 | awk {'if($3>1) print'} | wc -l
# number of undersplittings"
grep "|" diff_f1_sqCos_t90_vs_GT_2 | awk {'print $1-$4'} | sort -g | uniq -c | awk {'if($2<0) print $1'} | awk '{s+=$1} END {print s}'
# number of oversplittings"
grep "|" diff_f1_sqCos_t90_vs_GT_2 | awk {'print $1-$4'} | sort -g | uniq -c | awk {'if($2>0) print $1'} | awk '{s+=$1} END {print s}'








##########################################################################################  
##### Fly whole data: f1.* | directory: f1.sqCos | strategy: naive splitting (wrongly assumed to be sqCos+)
head f1.sqCos/f1.n*.mol.tsv -n 523407 > compare/f1.sqCosine+.header.mol.tsv
cd compare
awk -F\| '$1 { print substr($1,1,18)}' f1.sqCosine+.header.mol.tsv | uniq -c | sort -k 2 > molCount_f1.sqCos+
#awk {'print $2'} molCount_f1.sqCos+ | grep -f - molCount_GT_2 > molCount_GT_2_f1.filtered
awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_f1.sqCos+ molCount_GT_2 > molCount_GT_2_f1.filtered 
awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_GT_2_f1.filtered molCount_f1.sqCos+ > molCount_f1.sqCos+_filt
diff -y molCount_f1.sqCos+_filt molCount_GT_2_f1.filtered | grep "\-.*\-" > diff_f1.sqCos+
sort diff_f1.sqCos+ | grep '|' | wc -l
sort diff_f1.sqCos+ | wc -l
grep "|" diff_f1.sqCos+ | awk {'print $1-$4'} | sort -g | uniq -c > spdiff_f1.sqCos+

##########################################################################################  
##### Fly whole data: f1.* | directory: f1.physlrOrig.Shaun | strategy: physlr's simple graph splitting
# file: /home/sjackman/work/physlr/data/f1.n100-2000.physlr.overlap.n118.mol.tsv
cat f1.physlrOrig.Shaun/f1.n100-2000.physlr.overlap.n118.mol.tsv | awk '{if(gsub(/\t/,"")<2) print gsub(/\t/,"")}' | wc -l
head f1.physlrOrig.Shaun/f1.n100-2000.physlr.overlap.n118.mol.tsv -n 490747 > compare/f1.physlrOrigByShaun.header.mol.tsv
cd compare
awk -F\| '$1 { print substr($1,1,18)}' f1.physlrOrigByShaun.header.mol.tsv | uniq -c | sort -k 2 > molCount_f1.physlrOrigByShaun
#awk {'print $2'} molCount_f1.sqCos+ | grep -f - molCount_GT_2 > molCount_GT_2_f1.filtered
awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_f1.physlrOrigByShaun molCount_GT_2 > molCount_GT_2_f1physlrOrigByShaun.filt 
awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_GT_2_f1.filtered molCount_f1.physlrOrigByShaun > molCount_f1.physlrOrigByShaun_filt
diff -y molCount_f1.physlrOrigByShaun_filt molCount_GT_2_f1physlrOrigByShaun.filt  | grep "\-.*\-" > diff_f1.physlrOrigByShaun
sort diff_f1.physlrOrigByShaun | grep '|' | wc -l
sort diff_f1.physlrOrigByShaun | wc -l
grep "|" diff_f1.physlrOrigByShaun | awk {'print $1-$4'} | sort -g | uniq -c > spdiff_f1.physlrOrigByShaun




##########################################################################################  
##### Fly whole data: f1.* | directory: f1.sqCos2_real | strategy: sqCos+
cat f1_*.mol.tsv | awk '{if(gsub(/\t/,"")<2) print gsub(/\t/,"")}' | wc -l
head f1_*.mol.tsv -n 454363 > compare/f1.sqCosine+.header.mol.tsv
cd compare
awk -F\| '$1 { print substr($1,1,18)}' f1.sqCosine+.header.mol.tsv | uniq -c | sort -k 2 > molCount_f1.sqCos+
#awk {'print $2'} molCount_f1.sqCos+ | grep -f - molCount_GT_2 > molCount_GT_2_f1.filtered
awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_f1.sqCos+ molCount_GT_2 > molCount_GT_2_f1.filtered 
awk 'NR==FNR{seen[$2]; next} $2 in seen' molCount_GT_2_f1.filtered molCount_f1.sqCos+ > molCount_f1.sqCos+_filt
diff -y molCount_f1.sqCos+_filt molCount_GT_2_f1.filtered | grep "\-.*\-" > diff_f1.sqCos+

grep "|" diff_f1.sqCos+ |  wc -l
grep -v "|" diff_f1.sqCos+ | wc -l
wc -l diff_f1.sqCos+

grep "|" diff_f1.sqCos+ | awk {'print $1-$4'} | sort -g | uniq -c > spdiff_f1.sqCos+
grep "|" diff_f1.sqCos+ | awk {'if($4>1) print'} | awk {'print $1-$4'} | sort -g | uniq -c > spdiff_f1.sqCos+_multicompsTig
grep -v "|" diff_f1.sqCos+ | awk {'if($3>1) print'} | wc -l
# number of undersplittings"
grep "|" diff_GT2_GT_f1 | awk {'print $1-$4'} | sort -g | uniq -c | awk {'if($2<0) print $1'} | awk '{s+=$1} END {print s}'
# number of oversplittings"
grep "|" diff_GT2_GT_f1 | awk {'print $1-$4'} | sort -g | uniq -c | awk {'if($2>0) print $1'} | awk '{s+=$1} END {print s}'


##########################################################################################  
## comparing GT and GT_2
wc -l molCount_GT
	906150 molCount_GT
wc -l molCount_GT_2 
	893983 molCount_GT_2


.all.neigh
grep "NC_004353.4" fly/fly.f1.a0.65.d50k.m8.n5.q1.s2000.molecule.bed > fly/fly.chr4.f1.a0.65.d50k.m8.n5.q1.s2000.molecule.bed 
cut -f4 fly/fly.chr4.f1.a0.65.d50k.m8.n5.q1.s2000.molecule.bed | uniq -c | sort -k 2  > compare/molCount_GT_chr4
... ## make molCount_sqCos using the code above
awk {'print $2'} molCount_sqCos+ | grep -f - molCount_GT_chr4 > molCount_GT_chr4_filtered
diff -y molCount_sqCos+ molCount_GT_chr4_filtered | grep "\-.*\-" > diff_sqCosine+_chr4
sort diff_sqCosine+_chr4 | grep '|' | wc -l
sort diff_sqCosine+_chr4 | wc -l

##########
cut -f4 fly/fly.f1.a0.65.d50k.m8.n5.q1.s2000.molecule.bed | uniq -c | sort -k 2  > compare/molCount_GT_x


head sqCosine+emptyReturnWisely/f1chr4.n100-1000.physlr.overlap.n50.mol.tsv -n 8374 > compare/sqCosine+.header.mol.tsv
cd compare
awk -F\| '$1 { print substr($1,1,18)}' sqCosine+.header.mol.tsv | uniq -c | sort -k 2 > molCount_sqCos+
awk {'print $2'} molCount_sqCos+ | grep -f - molCount_GT_2 > molCount_GT_2_filtered

diff -y molCount_sqCos+ molCount_GT_2_filtered | grep "\-.*\-" > diff_sqCosine+
sort diff_sqCosine+ | grep '|' | wc -l
sort diff_sqCosine+ | wc -l


awk {'print $2'} bar2mol_sqCosine+.tsv | grep -f - barc2mol_GoldeTruth > bar2mol_GT_filtered


## 

head original\ physlr/f1chr4.n100-1000.physlr.overlap.n50.mol.tsv -n 9312 > compare/origPhyslr.header.mol.tsv
cd compare
awk -F\| '$1 { print substr($1,1,18)}' origPhyslr.header.mol.tsv | uniq -c | sort -k 2 > molCount_origPhyslr
awk {'print $2'} molCount_origPhyslr | grep -f - molCount_GT_2 > molCount_GT_2_filteredbyorig

diff -y molCount_origPhyslr molCount_GT_2_filteredbyorig | grep "\-.*\-" > diff_origPhyslr
sort diff_origPhyslr | grep '|' | wc -l
sort diff_origPhyslr | wc -l

###############################################
New lane of comparisons:
######
pack1: (run subgraphMaker.sh)

      1 AATCCAGAGGTTGTAA-1				      |	      2 AATCCAGAGGTTGTAA-1
      1 ACAGTGTAGCTAGTCT-1				      |	      2 ACAGTGTAGCTAGTCT-1
      1 ACATCTTAGAGACTAT-1				      |	      2 ACATCTTAGAGACTAT-1
      1 ACGTCAATCTGCGTAA-1				      |	      2 ACGTCAATCTGCGTAA-1
      1 ACTGAGTAGCAGCCCT-1				      |	      2 ACTGAGTAGCAGCCCT-1
      1 AGTTGGTTCAAGCCGC-1				      |	      2 AGTTGGTTCAGCATGT-1
      1 ATAGTGCTCCTGTGGG-1				      |	      2 ATAGTGCTCCTGTGGG-1
      1 ATATCGGTCGAATGTC-1				      |	      2 ATATCGGTCGAATGTC-1
      1 ATATGCGAGACCCATT-1				      |	      2 ATATGCGAGCCCAAAG-1
      1 CAACTTTCAACCAGAG-1				      |	      2 CAACTTTCAACCAGAG-1
      1 CACTTTATCAAACCGT-1				      |	      2 CACTTTATCAAACCGT-1
      1 CGATCAAAGGTAGACC-1				      |	      3 CGATCAAAGGTAGACC-1
      1 CGGATTAGTGCCACCA-1				      |	      2 CGGATTAGTGCCACCA-1
      1 CGTTCCATCTCAAGTG-1				      |	      2 CGTTCCATCTCAAGTG-1
      1 CTACACCTCGCTGATA-1				      |	      2 CTACACCTCGCTGATA-1
      1 CTGATCCGTAGGACTG-1				      |	      2 CTGATCCGTCGATTGT-1
      1 CTGTGCTCAGTGCGTC-1				      |	      3 CTGTGCTCAGTGCGTC-1
      1 GAGTGAGAGAGACTTA-1				      |	      2 GAGTGAGAGAGACTTA-1
      1 GCAACCGGTTTAGGAA-1				      |	      2 GCAACCGGTTTAGGAA-1
      1 GCGTGTGCAAACAACA-1				      |	      2 GCGTGTGCAAACAACA-1
      1 GCTATAGTCTATCCTA-1				      |	      2 GCTATAGTCTATCCTA-1
      1 GGCTTAAGTGTGCCTG-1				      |	      2 GGCTTAAGTGTGCCTG-1
      1 GTACGGCTCTCAAGTG-1				      |	      2 GTACGGCTCTCAAGTG-1
      1 GTTGCAACAACGTCTA-1				      |	      2 GTTGCAACAACGTCTA-1
      1 TAAGGCTCACCAGTGC-1				      |	      2 TAAGGCTCACCAGTGC-1
      1 TAGAAGAGTTGACATC-1				      |	      2 TAGAAGAGTTGACATC-1
      1 TAGACACCAACCAGAG-1				      |	      2 TAGACACCAACCAGAG-1
      1 TCAACGACAAGGACTG-1				      |	      2 TCAACGACAAGGACTG-1
      1 TTAGGACTCAGTGTGT-1				      |	      2 TTAGGACTCAGTGTGT-1
      1 TTCCCAGGTGTCCCTT-1				      |	      2 TTCCCAGGTGTCCCTT-1
      1 TTCGAAGCACGTCGGT-1				      |	      2 TTCGAAGCACGTCGGT-1
      1 TTCTCAACAGAGCCAA-1				      |	      2 TTCTCAACAGAGCCAA-1
      1 TTGTTTGTCCCAAGAT-1				      |	      2 TTGTTTGTCCCAAGAT-1
      2 ACCATCCAGGCTAGGT-1				      |	      1 ACCATCCAGGCTAGGT-1
      2 CTTAATCTCTTGTAGG-1				      |	      1 CTTAATCTCTTGTAGG-1
      2 TACTTCAAGGAATCCG-1				      |	      1 TACTTCAAGGAATCCG-1
      2 TCACGAAAGTGTCCGC-1				      |	      1 TCACGAAAGTGTCCGC-1
